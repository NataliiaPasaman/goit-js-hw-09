{"mappings":"AAAC,MAAMA,EAAO,CACZC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,mBACpCI,IAAKL,SAASC,cAAc,WAG9B,SAASK,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAS,CAACC,EAASC,KAC5BC,YAAW,KACNN,GACDI,EAAQ,C,SAAEN,E,MAAUC,IAEtBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAC1BA,EAAM,G,CAgBXV,EAAKC,KAAKiB,iBAAiB,UAE3B,SAAsBC,EAAQC,GAC5BC,MAAMC,iBAEN,IAAIC,EAASC,OAAOxB,EAAKI,WAAWqB,OAChCC,EAAOF,OAAOxB,EAAKK,UAAUoB,OACjCN,EAASK,OAAOxB,EAAKM,YAAYmB,OAEjC,IAAI,IAAIE,EAAI,EAAGA,GAAKR,EAAQQ,GAAK,EAG/BnB,EAFWmB,EAEaJ,GACvBK,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBO,YAAW,KACTY,QAAQC,IAAI,uBAAqBrB,QAAiBC,MAAU,GAC3DA,EAAM,IAEVqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBO,YAAW,KACTY,QAAQC,IAAI,sBAAoBrB,QAAeC,MAAU,GACxDA,EAAM,IAEXa,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":[" const refs = {\n  form: document.querySelector('.form'),\n  inputDelay: document.querySelector('[name=\"delay\"]'),\n  inputStep: document.querySelector('[name=\"step\"]'),\n  inputAmount: document.querySelector('[name=\"amount\"]'),\n  btn: document.querySelector('button'),\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise ((resolve, reject) => {\n    setTimeout(() => {\n      if(shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n/** Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n *  який виконується або відхиляється через delay часу. Значенням промісу повинен \n * бути об'єкт, в якому будуть властивості position і delay зі значеннями \n * однойменних параметрів. Використовуй початковий код функції для вибору того, \n * що потрібно зробити з промісом - виконати або відхилити.\n * createPromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  }); */\n\n  refs.form.addEventListener('submit', onSubmitForm);\n\n  function onSubmitForm(amount, position) {\n    event.preventDefault();\n\n    let delay =  Number(refs.inputDelay.value);\n    let step = Number(refs.inputStep.value);\n    amount = Number(refs.inputAmount.value);\n\n    for(let i = 1; i <= amount; i += 1) {\n      position = i;\n\n      createPromise(position, delay)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n      });\n      delay += step;\n    }\n  }\n\n\n\n"],"names":["$47d4ff9957288465$var$refs","form","document","querySelector","inputDelay","inputStep","inputAmount","btn","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","amount","position1","event","preventDefault","delay1","Number","value","step","i","then","console","log","catch"],"version":3,"file":"03-promises.c5493142.js.map"}
{"mappings":"YAAC,IAAMA,EAAO,CACZC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,mBACpCI,IAAKL,SAASC,cAAc,WAG9B,SAASK,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC5BC,YAAW,WACNN,GACDI,EAAQ,CAAEN,WAAUC,UAEtBM,EAAO,CAAEP,WAAUC,S,GAClBA,E,IAgBLV,EAAKC,KAAKiB,iBAAiB,UAE3B,SAAsBC,EAAQV,GAC5BW,MAAMC,iBAEN,IAAIC,EAASC,OAAOvB,EAAKI,WAAWoB,OAChCC,EAAOF,OAAOvB,EAAKK,UAAUmB,OACjCL,EAASI,OAAOvB,EAAKM,YAAYkB,OAEjC,IAAI,IAAIE,EAAI,EAAGA,GAAKP,EAAQO,GAAK,EAG/BlB,EAFWkB,EAEaJ,GACvBK,MAAK,SAAAC,G,IAAGC,EAAQD,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBO,YAAW,WACTa,QAAQC,IAAI,uBAAwCC,OAAfH,EAAS,QAAYG,OAANtB,EAAM,M,GACzDA,E,IAEJuB,OAAM,SAAAL,G,IAAGC,EAAQD,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBO,YAAW,WACTa,QAAQC,IAAI,sBAAqCC,OAAfH,EAAS,QAAYG,OAANtB,EAAM,M,GACtDA,E,IAELY,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":[" const refs = {\n  form: document.querySelector('.form'),\n  inputDelay: document.querySelector('[name=\"delay\"]'),\n  inputStep: document.querySelector('[name=\"step\"]'),\n  inputAmount: document.querySelector('[name=\"amount\"]'),\n  btn: document.querySelector('button'),\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise ((resolve, reject) => {\n    setTimeout(() => {\n      if(shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n/** Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n *  який виконується або відхиляється через delay часу. Значенням промісу повинен \n * бути об'єкт, в якому будуть властивості position і delay зі значеннями \n * однойменних параметрів. Використовуй початковий код функції для вибору того, \n * що потрібно зробити з промісом - виконати або відхилити.\n * createPromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  }); */\n\n  refs.form.addEventListener('submit', onSubmitForm);\n\n  function onSubmitForm(amount, position) {\n    event.preventDefault();\n\n    let delay =  Number(refs.inputDelay.value);\n    let step = Number(refs.inputStep.value);\n    amount = Number(refs.inputAmount.value);\n\n    for(let i = 1; i <= amount; i += 1) {\n      position = i;\n\n      createPromise(position, delay)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n      });\n      delay += step;\n    }\n  }\n\n\n\n"],"names":["$ce04d3a99e08e73b$var$refs","form","document","querySelector","inputDelay","inputStep","inputAmount","btn","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","amount","event","preventDefault","delay1","Number","value","step","i","then","param","_$position","console","log","concat","catch"],"version":3,"file":"03-promises.66c49758.js.map"}
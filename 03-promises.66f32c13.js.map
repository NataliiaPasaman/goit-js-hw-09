{"mappings":"YA+BE,IAiB2BA,EAAUC,EAjB/BC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,mBACpCI,IAAKL,SAASC,cAAc,WAI9BH,EAAKC,KAAKO,iBAAiB,SAAS,WAClCC,QAAQC,IAAIV,EAAKI,WAAWO,OAC5BF,QAAQC,IAAIV,EAAKK,UAAUM,OAC3BF,QAAQC,IAAIV,EAAKM,YAAYK,M,IAG/BX,EAAKC,KAAKO,iBAAiB,UAAU,WAAM,IAEhBV,EAUT,EAVmBC,EAUhB,IATnBD,EAAWE,EAAKI,WAAWO,MACLC,KAAKC,SAAW,GAEpCJ,QAAQC,IAAI,uBAAwCI,OAAfhB,EAAS,QAAYgB,OAANf,EAAM,OAExDU,QAAMC,IAAI,sBAAqCI,OAAfhB,EAAS,QAAYgB,OAANf,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["/** HTML містить розмітку форми, в поля якої користувач буде вводити першу \n * затримку в мілісекундах, крок збільшення затримки для кожного промісу \n * після першого і кількість промісів, яку необхідно створити. \n * \n * Напиши скрипт, який на момент сабміту форми викликає функцію \n * createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n *  Під час кожного виклику передай їй номер промісу (position), \n * що створюється, і затримку, враховуючи першу затримку (delay), \n * введену користувачем, і крок (step).\n * */\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n/** Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n *  який виконується або відхиляється через delay часу. Значенням промісу повинен \n * бути об'єкт, в якому будуть властивості position і delay зі значеннями \n * однойменних параметрів. Використовуй початковий код функції для вибору того, \n * що потрібно зробити з промісом - виконати або відхилити.\n * createPromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  }); */\n\n  const refs = {\n    form: document.querySelector('.form'),\n    inputDelay: document.querySelector('[name=\"delay\"]'),\n    inputStep: document.querySelector('[name=\"step\"]'),\n    inputAmount: document.querySelector('[name=\"amount\"]'),\n    btn: document.querySelector('button'),\n  }\n\n\n  refs.form.addEventListener('input', () => {\n    console.log(refs.inputDelay.value);\n    console.log(refs.inputStep.value);\n    console.log(refs.inputAmount.value);\n  })\n\n  refs.form.addEventListener('submit', () => {});\n\n  function createPromiseTest(position, delay) {\n    position = refs.inputDelay.value;\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  }\n\n  createPromiseTest(2, 500);"],"names":["position","delay","$ce04d3a99e08e73b$var$refs","form","document","querySelector","inputDelay","inputStep","inputAmount","btn","addEventListener","console","log","value","Math","random","concat"],"version":3,"file":"03-promises.66f32c13.js.map"}